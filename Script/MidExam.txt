숙제2 - 수학함수, 리스트,다중리스트,튜플,세트,딕셔너리
10-19 콩기계
    import random
    nOfBalls = eval(input('공의 개수 : '))
    nOfSlots = eval(input('슬롯의 개수 : '))
    slots = [0] * nOfSlots # 0으로 초기화

    for i in range(nOfBalls):#공의 개수만큼 반복
        count = 0 #R의 개수를 샌다
        for j in range(nOfSlots-1): #슬롯개수 - 1 만큼 반복
            if random.random() > 0.5:
                print('R', end = '') # 강제로 한줄 띄는 것을 방지
                count += 1
            else:
                print('L', end = '')
        print()
        slots[count] += 1 # 해당 슬롯에 공 1개 추가
    print(slots) # 디버깅
    Max = max(slots) # 최댓값
    for h in range(Max, 0, -1): # h=M, M-1, ..., 1
        for i in slots:
            if i >= h:
                print(' o ', end = '')
            else:
                print('   ', end = '')
        print()

2.14 삼각형의 넓이를 출력
    x1,y1,x2,y2,x3,y3 = eval(input('세 꼭지점 좌표 입력 : '))
    d1 = ((x2-x1)**2 + (y2-y1)**2)**0.5
    d2 = ((x3-x1)**2 + (y3-y1)**2)**0.5
    d3 = ((x2-x3)**2 + (y2-y3)**2)**0.5
    s = (d1 + d2 + d3) / 2
    area = (s*(s-d1)*(s-d2)*(s-d3))**0.5
    area = int(area * 10) / 10
    print('삼각형 넓이:', area)

3.2 두 점 사이의 대권 거리
    import math
    x1,y1 = eval(input('첫번째 점 위도 경도 : '))
    x2,y2 = eval(input('두번째 점 위도 경도 : '))
    d = (6370.01 * math.acos(math.sin(math.radians(x1))
        * math.sin(math.radians(x2))
        + math.cos(math.radians(x1))
        * math.cos(math.radians(x2))
        * math.cos(math.radians(y1-y2))))
    print("두 점 사이 거리 : ", d)

3.3 삼각형*2 사각형의 넓이
    import math

    d = []
    x1, y1 = 35.1768201,126.7735892
    x2, y2 = 35.1645701,129.0015892
    x3, y3 = 37.7637326,128.8824475
    x4, y4 = 37.565289,126.8491259
    def cal_distance(x1, y1, x2, y2):
        d = (6370.01 * math.acos(math.sin(math.radians(x1))
            * math.sin(math.radians(x2))
            + math.cos(math.radians(x1))
            * math.cos(math.radians(x2))
            * math.cos(math.radians(y1-y2))))
        return d

    def cal_Area(d1, d2, d3):
        s = (d1 + d2 + d3) / 2
        area = (s * (s - d1) * (s - d2) * (s - d3)) ** 0.5
        return area

    d12 = cal_distance(x1,y1,x2,y2)
    d23 = cal_distance(x2,y2,x3,y3)
    d34 = cal_distance(x3,y3,x4,y4)
    d14 = cal_distance(x1,y1,x4,y4)
    d13 = cal_distance(x1,y1,x3,y3)

    area1 = cal_Area(d12,d23,d13)
    area2 = cal_Area(d14,d34,d13)
    sum = area1 + area2
    print("넓이 : ", sum)

    10-5 중복을 제거하고 출력하는 프로그램
        s = input("10개 개수 정수 입력 : ")
        items = s.split()
        numbers = [eval(x) for x in items]
        list2 = []
        for number in numbers:
            if not number in list2:
                list2.append(number)
        print("중복을 제거한 고유한 숫자 : ", list2)

3.6 아스키코드 입력, 출력
    code = eval(input("ASCII 코드 입력 : "))
    print("문자는 : ", chr(code))

3.7 랜덤 대문자 출력
    import time
    while(True):
        print(chr(ord('A') + int(time.time())%26))
        time.sleep(1)

3.8 급여 명세서 출력
    name = input("사원 이름 : ")
    hour = eval(input("주당 근무 시간 : "))
    salary = eval(input("시간당 급여 : "))
    rate1 = eval(input("원천징수 세율 : "))
    rate2 = eval(input("지방세율 : "))

    print("사원 이름 : ", name)
    print("주당 근무 시간 : ", hour)
    print("시간당 급여 : ", salary)
    print("총급여 : ", hour * salary)
    print("공제:")
    tex1, tex2 = salary*hour*rate1, salary*hour*rate2
    print("원천징수세(", rate1*100, "%):", tex1)
    print("주민세(", rate2*100, "%):", tex2)
    print("총 공제 : ", tex1+tex2)
    print("공제 후 급여 : ", hour * salary  -tex1 -tex2)

10.2 정수 리스트를 읽고 읽은 순서의 역순으로 출력
    s = input("정수 리스트 입력 : ")
    items = s.split()
    items.reverse()

    print(items)

10.2Ref 리스트의 원소 lst[2] lst[-2]
    lst = [30, 1, 12, 14, 10 ,0]
    print("원소 개수 : ", len(lst))
    print("첫번 째 원소 : ", lst[0])
    print("마지막 원소 : ", lst[-1])
    print("lst[2] : ", lst[2])
    print("lst[-2] : ", lst[-2])

10.3 1과 100 사이의 정수를 입력 받고 빈도수 세는 프로그램
    s = input('1과 100사이 정수 입력 : ')
    sList = s.split()
    iList = [eval(i) for i in sList]
    histogram = [0]*100

    for i in iList:
        histogram[i-1] += 1

10.3Ref 리스트에 관한 함수들 추가 제거 정렬
    import random

    lst = [30, 1, 2, 1, 0]
    #lst.append(40)
    #lst.insert(1, 43)
    #lst.extend([1, 43])
    #lst.pop(1)
    #lst.pop()
    #lst.sort()
    # lst.reverse()
    random.shuffle(lst)

    print(lst)

10.4 점수 분석하기 평균보다 큰지 작은지
    sList = input('정수를 입력 : ').split()
    iList = [eval(s) for s in sList] # 문자열 -> 정수로 치환
    average = sum(iList) / len(iList)

    count = 0
    for i in iList:
        if i >= average:
            count += 1

    print('평균이상인 개수 : ', count)
    print('평균 미만 개수 : ', len(iList) - count)

10.4Ref 리스트의 max len min sum
    lst = [30,1,2,1,0]
    print(lst.count(1))
    print(lst.index(1))
    print(len(lst))
    print(max(lst))
    print(min(lst))
    print(sum(lst))

10.5 중복을 제거한 숫자
    s = input("10개 개수 정수 입력 : ")
    items = s.split()
    numbers = [eval(x) for x in items]
    list2 = []
    for number in numbers:
        if not number in list2:
            list2.append(number)
    print("중복을 제거한 고유한 숫자 : ", list2)

10.15 정렬되었는가?
    #lst = 1 2 3 4 5 -> True
    #lst = 1 3 2 4 5 -> False
    def isSorted(lst): #오름차순 정렬되어 있으면 True 반환
        for i in range(len(lst)-1):
            if lst[i] > lst[i+1]:
                return False
        return True

    sList = input('정수를 입력 : ').split()
    iList = [eval(s) for s in sList]
    if isSorted(iList):
        print('정렬되어 있음')
    else:
        print('정렬되어 있지 않음')

14.2 가장 많이 나온 숫자 찾기ㅏ
    s = input("정수 리스트 입력 : ")
    intList = [eval(i) for i in s.split()]
    d = {}
    for n in intList:
        if n in d:
            d[n] += 1
        else:
            d[n] = 1
    maxCount = max(d.values())
    for k, v in d.items():
        if v == maxCount:
            print(k, end = " ")

11.27 3x3 행렬 받고 정렬하기
    def sortColumns(m):
        for i in range(len(m)):
            for j in range(len(m[i]) - 1):
                if m[i][j] > m[i][j+1]:
                    m[i][j], m[i][j+1] = m[i][j+1], m[i][j]
        return m



    matrix = []
    for i in range(3):
        s = input("3x3 행렬의 {0}번에 대한 원소를 입력하세요 : ".format(i))
        l = [eval(i) for i in s.split()]
        matrix.append(l)
    sortColumns(matrix)
    for i in range(3):
        print(matrix[i])

숙제3 선택문, 루프, 함수, 재귀함수
4-1. 이차방정식

4.24 카드뽑기

4.27 삼각형 내부에 점이 있는지

5.39 매출액

5.42 다트를 던져서 어디에 맞을 확률

6.3 반환, 대칭수

6.4 정수를 역순으로, 오름차순 출력

6.12 문자 출력하는 함수

6.13 급수를 계산 i/i+1

15.3 재귀

15.18 하노이타워

15.9 10진수 -> 2진수

숙제4































































