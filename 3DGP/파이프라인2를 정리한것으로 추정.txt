HEAP_TYPE_DEFAULT
GPU는 읽고 쓰기 가능
CPU 접근 불가
대부분 리소스에 적용

HEAP_TYPE_UPLOAD
업로드를 위한 CPU 접근 최적화
GPU 읽기만 가능

HEAP_TYPE_READBACK
읽기 위한 힙
CPU 접근에 최적화
GPU 뷰에 따라 읽기 쓰기 결정

구분한 이유
CPU 접근에 대해 구분해서 사용

HEAP_PROPERTIES에서 중요한 점
힙 타입은 무조건 정해줘야 함

RESOURCE_DESC
Dimension 텍스쳐가 몇 차원인지
Alignment 0 <- 디폴트(64K)

리소스를 만드려면
RENDER_TARGET, DEPTH_STENCIL, UNORDERED_ACCESS 이 세개가 들어가야 함

OMSetRenderTargets
렌더 타겟과 깊이-스텐실 버퍼를 파이프라인에 연결
스왑체인 버퍼는 두개임(0, 1)

래스터라이저 단계
RSSetViewports: 뷰포트 셋 가능, 그림을 그릴 사각형 영역, 커멘드리스트를 리셋하면 항상 다시 호출해야 함
RSSetScissorRects: 렌더링에서 제거하지 않을 영역

리소스 장벽(Resource Barrier)
리소스의 상태를 관리하기 위한 객체
멀티스레딩을 하게 되면 여러 개의 스레드들이 하나의 리소스를 사용하려고 할 때 관리 가능하도록 함
모든 리소스는 어떤 순간에 하나의 상태를 가짐
렌더 타겟: D3D12_RESOURCE_STATE_RENDER_TARGET
깊이/스텐실 버퍼: D3D12_RESOURCE_STATE_RENDER_WRITH
후면 버퍼: D3D12_RESOURCE_STATE_RENDER_PRESENT

리소스 장벽 유형
전이 장벽
겹침 장벽
무순서 접근 뷰 장벽
----------------------------------------------------------------------------
렌더링 파이프라인
고정 프로그램 단계
-> 입력 조립 단계
-> 테셀레이터 단계
-> 스트림 출력 단계
-> 래스터라이저 단계
-> 출력 병합 단계
프로그램 가능 단계
-> 정점 쉐이더 단계
-> 헐 쉐이더 단계
-> 도메인 쉐이더 단계
-> 기하 쉐이더 단계
-> 픽셀 쉐이더 단계

입력-조립 단계
입력 리소스를 받아 파이프라인 제일 먼저 시작하는 함수
입력 리소스에 정점들의 값이 저장되어 있는 배열을 보냄
시스템 생성 값(시맨틱이라고 하는 문자열 값)을 추가

래스터라이저 단계
원근 투영 나누기
카메라 절두체를 벗어나는 점 클리핑
프리미티브를 2차원 뷰포트로 매핑
벡터 정보(프리미티브)를 래스터 이미지(픽셀)로 변환

모델의 정점은 모델좌표계로 저장되어 있음
버텍스 쉐이더는 트랜스폼을 함, 월드 좌표계로 변환(월드 변환 행렬)
래스터라이저가 원근 투영 나누기를 먼저 함
레즈터라이저 단계에서 자동으로 픽셀의 속성을 보간함
----------------------------------------------------------------------------
출력-병합 단계
최종적으로 픽셀의 색상 생성하여 렌더 타겟으로 출력하는 단계

깊이-스텐실 검사
픽셀이 그려져야 하는지를 결정하기 위하여 깊이 갚과 스탠실 값 데이터 사용
사용 이유: 정렬을 하지 않기 위해서
하나의 깊이/스텐실 버퍼만 활성화됨

블렌딩
픽셀 값들을 결합하영 하나의 최종 픽셀 색상 생성하는 과정
불투명한것과 투명한것을 그리려면 불투명한것을 먼저 그리고 투명한것을 그려서 블렌딩
Scene에는 투명한것리스트와 불투명한것리스트로 나뉘어야 함

정점-쉐이더 단계
각 정점에 대한 연산
변환, 스키닝, 조명
하나의 정점에 대하여 한 번 호출되며 하나의 출력 정점을 생성

픽셀-쉐이더 단계
각 픽셀에 대하여 픽셀-쉐이더를 한번씩 호출
discard - 픽셀을 버려라

100개의 오브젝트를 50개는 솔리드 하나는 와이어프레임으로 그리려면
파이프라인 스테이트 오브젝트 생성, 두 개는 만들어야 함

UI
ex) fps에서 조준하는거 그리려면 중간에 사각형을 하나 그리고 가려야 하는 부분은 가리고 보여야 하는 부분은 투명하게 함 - 블렌딩

게임 프레임워크
게임 오브젝트들의 포인터들에 대한 배열: Scene
교수님은 Scene을 배열로 표기했지만 트리가 정배

Scene 
반복을 하기 위한(ex. 충돌체크) 포인터들의 배열을 따로 만듦
----------------------------------------------------------------------------
리소스
미리 만들어 놓을 수 있는 데이터
미리 계산해도 되는거 계산할 수 있도록 설정 -> 프레임 데이트 결정
CPU와 GPU가 리소스에 접근할 수 있는 여부를 지정



































