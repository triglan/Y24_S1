멀리있는거 먼저 그리기 작게그리기

그래픽 카드가 메쉬 즉 다각형을 그려줌-> 보통 그래픽카드는 삼각형을 그림
메쉬-실수들의 집합이라고도 함-> XYZ로 000/000/000 점하나씩으로 이루어져있음

front face 전면
back(hidden) face 후면 은면 즉 은선을 가지고 있는 면은 보이지 않는다(은면이라고 함)

모델좌표계 객체좌표계

<메쉬와 텍스쳐 매핑>
선분들로 원을 만드는 것을 근사할 수 없음->오차가 많기때문에 
삼각형의 개수를 게속늘려서 무한하게 그려야함->즉 게임이 불가능

완벽하게 3차원으로 표현하는 것은 불가능함
대부분의 3d 객체들은 완벽하게 표현 못하기 때문에 점을 늘리거나 2d이미지를 
겉면에 입혀 표현->현실적으로 보이게 한다

맵은 이미지, 매핑은 맵을 입히는 과정

보이지(카메라) 않는 면은 안그리는 것이 제일 좋다->은면 제거(제거하는 과정을 컬링이라함)
그럼 수학적으로 어떻게 은면을 판단하는가?
->와인딩순서:각 정점들을 시계/반시계 방향으로 나열순서를 정함(dx3d는 시계)
보인다고 가정하고 시계방향 순서대로 저장해야함

평면(ppt70)
카메라과 평면의 법선벡터의 내적으로 은면인지 아닌지 확인이 가능

장면-게임월드 자체
렌더링-모든 게임오브젝트를 픽셀들을 그리는것(3d'/델 좌표를 2d좌표로 변환하는 과정)
=T&L Transformation(이동,크기..)&Lighting(버택스들의 색)

Transformation
3d에 있는 점을 찾아내어 2d로 화면에있는 점으로 변경하는 과정

<변환파이프라인>
모델좌표계--->월드좌표계--->카메라 좌표계------->투영좌표계-------->화면좌표계
	월드변환	      카메라 변환     투영변환(3d에서 2d로)     화면 변환(2d좌표를 화면에 그림)

인스터싱-각각의 자신의 메쉬를 가지는 것(게임메모리 낭비가 심함)이 아닌 
메쉬를 공유하는 형태로 만든다(포인터 사용)

변환
1.평행이동
2.회전-회전축의 좌표는 변하지 않는다 / 오른손 좌표계로 엄지가 축을 기준으로 손이 말리는 방향
이 +이다
->오일러각도 표현(모양 위치 방향)

스케일링 없다

카메라변환
카메라 위치와 카메라의 회전
카메라의 화각=보통60도 카메라가 상하좌우 몇도를 바라볼 수 있는가

직교투영하면 거리감 없어짐 즉, 원근 투영변환 이용
직교는z 가 필요없지만 원근은 필요/ z를 x,y에 나눠준다-멀리있는것 작아짐(z가 커지면 
0에 가까워짐)원근투영 나누기
근평면까지의 거리-너무 가까워서 못보는 경우
원평면 // :가장 멀리 볼 수 있는 거리(너무 멀면 안보이고 너무 가까워도 안보인다)
절두체:원 근 평면들 사이의 공간

fov가 커진다는 의미는 금방 화면에서 사라진다는 의미이다

//3/19
벡터의 외적은 까먹어도됌-> 외적의 의미를 알아야함
두개의 벡터가 주어진 것은 평면이 주어진것(3개의 점이 주어졌다=삼각형이 주어졌다)
두벡터에 수직인 벡터=평면에 수직인 벡터라고도 함->왼손법칙
axb=-(bxa) 
외적을 통해 카메라를 향하고 있는지 판별함-면이 보이는지 안보이는지
(중요)면의 방향을 구할때 면의 회전축을 구할때 외적이 필요

벡터의 내적->연산결과는 실수임

차원이 높아져도 내적은 할 수 잇음
몇도 돌아야하는가를 알 수 잇음(두벡터사이의 각도를 구할 수 있다)
은면제거할 때사용(면의 법선벡터와 카메라와 다각형의 한 점까지의 벡터 내적)
90도 초과-음수 보인다
90도이하- 양수 안보인다 :은면제거
직교투영으로 이용
반사백터로 이용
굴절벡터에서도 이용

quiz->외적을 통해 회전축을 구하고 내적을 통해 회전하는 각도를 구한다

반사벡터
굴절벡터

//3/22
평면
평면을 노멀라이즈 한다
(중요)
평면에서 원점까지의 거리: 는 삼각함수의코싸인법칙을 이용하여 나타낼 수 있는데 이는 
원점이 평면 뒤에 있을때 원점에서 평면의 한점까지의 벡터와 
평면의 법선벡터를 내적한것과 같다 즉  
(평면의 벡터가 밖을 바라보고 있을 때)방정식에 총알의 위치를 대입했을 때 
음수가 나와야만 안에 있는 것으로 알 수 있음

//3/26
다렉은 행을 기준으로 좌표표현 오픈지엘은 열을 기준으로 좌표 표현
카메라 변환에서 역행렬을 구하면 원상태로 돌아감
카메라 변환 행렬을 만들어서 쓰자 
D3DXMATRIXlOOKAtLH->카메라 변환 행렬만들어줌
역행렬구하는 함수 사용하지 말자->시간오래 걸림
up벡터는 보통 (010)y축을 넣는다 내.외적하면 다시 바뀜

FOV가 90도로 가정하면 원근투영했을 때 -1<=x,y<=1
마지막열 0010으로 바꾸면 z값이 나와 그것으로 안개처리 가능
종횡비=가로/세로(640/480)->분모에다 곱해줘서 늘어나는 것을 막는다

왜 쓰는가?
FOV가90도로 보이게하려고
종횡비를 맞추기 위해
뎁스(깊이 값)를 계산할 수 있음

직교투영 보통 ui,체력바 등등

소팅하면 시간많이 걸림(사용X)
뎁스버퍼 알고리즘
랜더타겟->도화지
오브젝트들 뎁스를 덥스버퍼(초기 1로초기화 해준다)과 비교해서 작으면 그 뎁스 값을 넣어준다

피킹
역변환한다


































