


================================================
save.h, 저장시간: 2024-03-05 화요일 오후 3:56:37
================================================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);



================================================
save.cpp, 저장시간: 2024-03-05 화요일 오후 3:56:37
================================================
//-------------------------------------------------------------------
// save.cpp
// 한 학기 강의를 저장할 함수
//-------------------------------------------------------------------
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"
void save(std::string_view fileName)
{
    // fileName을 읽을 파일로 연다.
    std::ifstream in{ fileName.data() };
    if (not in) {
        std::cout << fileName << " - 파일 열기 실패" << std::endl;
        exit(0);
    }

    // 저장할 파일을 덧붙여 쓰기 모드로 연다.
    std::ofstream out{ "2024 1학기 STL 월910 화78 강의저장.txt", std::ios::app };

    // 저장한 시간을 기록한다.
    out << std::endl << std::endl << std::endl;
    auto now = std::chrono::system_clock::now();               // epoch(찾아보셈)
    auto time = std::chrono::system_clock::to_time_t(now);         // UTC 시간으로 변환
    auto lt = localtime(&time);   // 현지시간으로 변환(컴퓨터 시간 따라감)

    auto old = out.imbue(std::locale("ko_KR"));
    // 날짜를 내 마음대로 출력한다.
    out << "================================================" << std::endl;
    out << fileName << std::put_time(lt, ", 저장시간: %x %A %X") << std::endl;
    out << "================================================" << std::endl;
    out.imbue(old);


    // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
    // STL 자료구조와 알고리즘을 이용해 본다. (좋은 코딩은 아님, 예를 들어서 보여줄 뿐...)
    std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
    copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 3:56:37
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int &a, int &b) {
	int temp{ a };
	a = b;
	b = temp;
}

int main()
{
	int a{ 1 }, b{ 2 };
	change(a, b);
	cout << a << ", " << b << endl;

	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:04:39
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

int main()
{
	int a[1000];
	
	for (int num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:05:01
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

int main()
{
	int a[1000];
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:07:23
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

// 문제 가장 큰 수를 찾아 화면에 출력하라
int main()
{
	int a[1000];
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	// 가장 큰 수를 찾는 프로그램
	int big = 0;
	for (int num : a)
		if (big > num)
			big = num;

	cout << endl << endl << "가장 큰 수 : " << big << endl;
	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:07:32
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

// 문제 가장 큰 수를 찾아 화면에 출력하라
int main()
{
	int a[1000];
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	// 가장 큰 수를 찾는 프로그램
	int big = 0;
	for (int num : a)
		if (big < num)
			big = num;

	cout << endl << endl << "가장 큰 수 : " << big << endl;
	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:08:45
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

// 문제 가장 큰 수를 찾아 화면에 출력하라
int main()
{
	int a[1000];
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	// 가장 큰 수를 찾는 프로그램
	int big{ 0 };
	for (int num : a)
		if (big < num) big = num;

	cout << endl << endl << "가장 큰 수 : " << big << endl;
	save("STL.cpp");
}



================================================
STL.cpp, 저장시간: 2024-03-05 화요일 오후 5:10:41
================================================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시								(1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <random>
#include <format>
#include <iostream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1000, 9999 };

// 문제 가장 큰 수를 찾아 화면에 출력하라
int main()
{
	int a[1000];
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		cout << format("{:8}", num);

	// 가장 큰 수를 찾는 프로그램
	int big{ 0 };
	for (int num : a)
		if (big < num) big = num;

	cout << endl << endl << "가장 큰 수 : " << big << endl;
	save("STL.cpp");
}
