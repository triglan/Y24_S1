====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:37:12 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;

int main() {
    save("STL.cpp");
    vector<int> v(100);
    for (int num : v)
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:42:43 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    for (int num : v)
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:43:11 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    ranges::sort(v);
    for (int num : v)
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:46:01 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    ranges::sort(v);
    for (int num : views::counted(v.begin(), 20))
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:46:51 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    ranges::sort(views::counted(v.begin(), 20));
    for (int num : v) //begin+size
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:49:32 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    ranges::sort(v.begin(), v.begin() + 20);
    for (int num : views::filter(v, [](int n) { return n & 1; })) //[begin, predicate)
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 5:51:28 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
int main() {
    save("STL.cpp");
    vector<int> v(100);
    ranges::iota(v, 1); //constrained-algorithm (컨셉으로 인자에 제약을 가한 함수)
    ranges::shuffle(v, dre);
    ranges::sort(v.begin(), v.begin() + 20);
    for (int num : views::iota(1)) //[begin, ..)
        print("{:4}", num);
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:02:14 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

struct Dog {
    char c = uidC(dre);
    int n = uid(dre);
};
int main() {
    save("STL.cpp");
    vector<Dog> dogs(100);
    for (auto [글자, 숫자] : dogs)
        cout << 글자 << " --- " << 숫자 << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:03:26 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

struct Dog {
    char c = uidC(dre);
    int n = uid(dre);
};
int main() {
    save("STL.cpp");
    vector<Dog> dogs(100);
    ranges::sort(dogs, [](const Dog& a, const Dog& b) {return a.n < b.n; });
    for (auto [글자, 숫자] : dogs)
        cout << 글자 << " --- " << 숫자 << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:16:29 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

struct Dog {
    char c = uidC(dre);
    int n = uid(dre);
};
int main() {
    save("STL.cpp");
    vector<Dog> dogs(100);
    ranges::sort(dogs, greater<char>(), &Dog::c);
    for (auto [글자, 숫자] : dogs)
        cout << 글자 << " --- " << 숫자 << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:28:05 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

struct Dog {
    char c = uidC(dre);
    int n = uid(dre);
};
int main() {
    save("STL.cpp");
    for (int num : ranges::views::iota(1) | views::drop(100) | views::take(1000))
        print("{}", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:31:14 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

struct Dog {
    char c = uidC(dre);
    int n = uid(dre);
};
int main() {
    save("STL.cpp");
    for (int num : views::iota(1)
        | views::drop(100)
        | views::take(1000)
        | views::reverse
        | views::filter([](int n) {return n & 1; }))
        print("{} ", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:33:25 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

#include <cmath>

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n == 2) return true;
    if (n % 2 == 0) return false;
    int sqrt_n = static_cast<int>(std::sqrt(n));
    for (int i = 3; i <= sqrt_n; i += 2) {
        if (n % i == 0) return false;
    }
    return true;
}

int main() {
    save("STL.cpp");
    for (int num : std::ranges::views::iota(1)

        | std::ranges::views::filter(is_prime))
        print("{} ", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:35:47 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
#include <cmath>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

int main() {
    save("STL.cpp");

    auto 소수 = [](int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        auto sqrt_n = static_cast<int>(sqrt(n));
        for (int i = 3; i <= sqrt_n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
        };

    for (int num : ranges::views::iota(1)
        | ranges::views::take(1000)
        | ranges::views::filter(소수))
        print("{} ", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:37:06 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
#include <cmath>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

int main() {
    save("STL.cpp");

    auto 소수 = [](int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        auto sqrt_n = static_cast<int>(sqrt(n));
        for (int i = 3; i <= sqrt_n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
        };

    for (int num : ranges::views::iota(100000)
        | ranges::views::take(10)
        | ranges::views::filter(소수))
        print("{} ", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:37:36 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
#include <cmath>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

int main() {
    save("STL.cpp");

    auto 소수 = [](int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        auto sqrt_n = static_cast<int>(sqrt(n));
        for (int i = 3; i <= sqrt_n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
        };

    for (int num : ranges::views::iota(100000)
        | ranges::views::filter(소수)
        | ranges::views::take(10))
        print("{} ", num);
    cout << endl;
}

====================
STL.cpp, 저장시간 : 2024-06-10 월요일 오후 6:38:27 
====================
//---------------------------------------------------------
// 2024 1학기 STL 6월 10일 월요일
//
// c++20 Range
// - [begin, end)
// - begin+size
// - [begin, predicate)
// - [begin, ..)
//---------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"
#include <array>
#include <vector>
#include <list>
#include <print>
#include <random>
#include <algorithm>
#include <numeric>
#include <ranges>
#include <cmath>
using namespace std;
extern bool 관찰;
default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution<int> uid{ 1,100 };
// c++20 - ranges 라이브러리
// 기존 알고리즘을 다 새로 작성
// - c++20 concept을 사용하여 인자를 제약
// - projection 과 pointer to member를 사용 가능
// - 더 풍부한 정보를 담는 리턴값 제공

int main() {
    save("STL.cpp");

    auto 소수 = [](int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        auto sqrt_n = static_cast<int>(sqrt(n));
        for (int i = 3; i <= sqrt_n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
        };

    for (int num : ranges::views::iota(100000)
        | ranges::views::filter(소수)
        | ranges::views::take(10)
        | views::reverse
        )
        print("{} ", num);
    cout << endl;
}