


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 5:48:03
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	// 처음이라 쉬운듯
	int num;
	cout << "숫자를 입력하라 - ";
	cin >> num;

	int* arr = new int[num];
	
	for (int i = 0; i < num; ++i)
		arr[i] = i + 1;

	int sum{};
	for (int i = 0; i < num; ++i)
		sum += arr[i];

	cout << "합계 : " << sum << endl;

	save("STL.cpp");
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 5:49:21
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	save("STL.cpp");

	while (1) {
		// 처음이라 쉬운듯
		int num;
		cout << "숫자 - ";
		cin >> num;

		int* arr = new int[num];

		for (int i = 0; i < num; ++i)
			arr[i] = i + 1;

		int sum{};
		for (int i = 0; i < num; ++i)
			sum += arr[i];

		cout << "합계 : " << sum << endl;
	}
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 5:50:51
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	save("STL.cpp");

	while (1) {
		// 처음이라 쉬운듯
		int num;
		cout << "숫자 - ";
		cin >> num;

		int* arr = new int[num];

		for (int i = 0; i < num; ++i)
			arr[i] = i + 1;

		long sum{};
		for (int i = 0; i < num; ++i)
			sum += arr[i];

		cout << "합계 : " << sum << endl;
	}
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 5:51:15
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	save("STL.cpp");

	while (1) {
		// 처음이라 쉬운듯
		int num;
		cout << "숫자 - ";
		cin >> num;

		int* arr = new int[num];

		for (int i = 0; i < num; ++i)
			arr[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += arr[i];

		cout << "합계 : " << sum << endl;
	}
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 5:58:17
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include <numeric>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	save("STL.cpp");
	//STL 방식으로 바꾸는 중
	while (1) {
		int num;
		cout << "숫자 - ";
		cin >> num;

		int* arr = new int[num];

		iota(arr, arr + num, 1);
		auto sum = accumulate(arr, arr + num, 0);

		cout << "합계 : " << sum << endl;
	}
}




================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 6:18:55
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// ----------------------------------------------------------

#include <iostream>
#include <numeric>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복해라.

// -> run-time 에서야 num값이 결정된다 --> numT[num]
// -> compile time에 모든 값이 결정 -> constexpr

int main()
{ 
	save("STL.cpp");
	//STL 방식으로 바꾸는 중
	while (1) {
		int num;
		cout << "숫자 - ";
		cin >> num;

		int* arr = new int[num];

		iota(arr, arr + num, 1);
		auto sum = accumulate(arr, arr + num, 0LL );// (longlong) 0이라는 뜻 

		cout << "합계 : " << sum << endl;
	
		//delete[] arr;
	}
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 6:44:31
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// 
// 앞으로 C++ 언어에서 사용하지 않아야 할 것들
// char* -> string
// T[N] -> array
// T* -> unique_ptr, shared_ptr(스마트 포인터로 대체)
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

class Dog {
public:
	Dog() { cout << "개 생성" << endl; }
	~Dog() { cout << "개 소멸" << endl; }

};

void f() {
	Dog* p;
	p = new Dog;
	delete p;
}

int main()
{
	f();

	save("STL.cpp");
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 6:46:18
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// 
// 앞으로 C++ 언어에서 사용하지 않아야 할 것들
// char* -> string
// T[N] -> array
// T* -> unique_ptr, shared_ptr(스마트 포인터로 대체)
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

class Dog {
public:
	Dog() { cout << "개 생성" << endl; }
	~Dog() { cout << "개 소멸" << endl; }

};

void f() {
	cout << "f 함수 시작" << endl;

	Dog* p;
	p = new Dog;
	delete p;

	cout << "f 끝" << endl;
}

int main()
{
	cout << "메인 시작" << endl;

	f();

	save("STL.cpp");

	cout << "메인 끝" << endl;
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 6:49:53
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// 
// 앞으로 C++ 언어에서 사용하지 않아야 할 것들
// char* -> string
// T[N] -> array
// T* -> unique_ptr, shared_ptr(스마트 포인터로 대체)
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

class Dog {
public:
	Dog() { cout << "개 생성" << endl; }
	~Dog() { cout << "개 소멸" << endl; }

};

void f() {
	cout << "f 함수 시작" << endl;

	Dog* p;
	{
		//예외 발생
		p = new Dog;
		throw 1234;
	}
	delete p;

	cout << "f 끝" << endl;
}

int main()
{
	cout << "메인 시작" << endl;

	try {// 문제가 발생할 수 있는 곳에 전부 넣어줘야 한다
		f();//자원을 확보하고 정리하는 함수	
	}
	catch (...) {//예외를 캐치하게 되면..

	}
	save("STL.cpp");

	cout << "메인 끝" << endl;
}


================================================
STL.cpp, 저장시간: 2024-03-25 월요일 오후 7:01:27
================================================
//----------------------------------------------------------
// 2024 STL 3.25 월 (4-1주차)
//  
// 메모리 동적할당 - RAII 
// 
// 앞으로 C++ 언어에서 사용하지 않아야 할 것들
// char* -> string
// T[N] -> array
// T* -> unique_ptr, shared_ptr(스마트 포인터로 대체)
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

class Dog {
public:
	Dog() { cout << "개 생성" << endl; }
	~Dog() { cout << "개 소멸" << endl; }

};
class Smart_ptr {
	Dog* p;
public:
	Smart_ptr(Dog* p) : p{ p } {}
	~Smart_ptr() { delete p; }
};
void f() {
	cout << "f 함수 시작" << endl;

	{
		Smart_ptr p(new Dog);	//stack - unwinding 스택이 거꾸로 되감김을 보장한다.
		throw 1234;
	}

	cout << "f 끝" << endl;
}

int main()
{
	cout << "메인 시작" << endl;

	try {// 문제가 발생할 수 있는 곳에 전부 넣어줘야 한다
		f();//자원을 확보하고 정리하는 함수	
	}
	catch (...) {//예외를 캐치하게 되면..

	}
	save("STL.cpp");

	cout << "메인 끝" << endl;
}