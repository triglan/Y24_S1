//기본함수
    cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
    cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
    cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
    // 앞으로 C++ 언어에서 사용하지 않아야 할 것들  
    // char* -> string
    // T[N] -> array
    // T* -> unique_ptr, shared_ptr(스마트 포인터로 대체)


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

    #include <iostream>
    #include "save.h"
    using namespace std;

    void change(int &a, int &b) {
        int temp{ a };
        a = b;
        b = temp;
    }

    int main()
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        cout << a << ", " << b << endl;

        save("save.h");
        save("save.cpp");
        save("STL.cpp");
    }


//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.
    #include <iostream>
    #include "save.h"

    #include <array>
    #include <random>
    #include <minmax.h>
    #include <print>
    using namespace std;



    default_random_engine dre;
    uniform_int_distribution uid{ 0, 99999 };

    int main()
    {
        array<int, 100> a;// 배열 대신 이걸 사용한다.
        
        cout << "메모리를 더 사용하지도 않는다. - " << sizeof(a) << endl;

        for (int& num : a)
            num = uid(dre);

        for (int num : a)
            print("{:8}", num);	//c++이상에선 이렇게 출력
        cout << endl << endl;

        // 제일 큰 값을 찾아 화면에 출력해라
        auto pos = max_element(begin(a), end(a));
        cout << "최댓값 : " << *pos << endl;
        save("STL.cpp");
    }


//문제 : 파일 int값들.txt에는 몇개인지 모르는 int가 저장되어 있다.
//모두 몇개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하시오
    #include <iostream>
    #include "save.h"

    #include <string_view>
    #include <fstream>
    using namespace std;


    int main()
    {

        ifstream in{ "int값들.txt" };
        if (not in)
            exit(0);
        
        int num;
        int cnt{};
        while (in >> num)
            ++cnt;
        cout << "모두 " << cnt << "개의 int를 읽었다." << endl;

        cout << *max_element(istream_iterator<int>{in}, {});

        save("STL.cpp");
    }


// 문제 : "int100개를메모리그대로저장.txt"에 int값 100개가 write 함수를 사용하여 기록되어 있다.
// 파일은 binary 모드로 열어 기록되었다. 
// 파일에 기록된 int값 100개를 메모리로 읽어온 후 화면에 그 값을 출력하라.
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <array>

    using namespace std;

    int main()
    {
        ifstream in("int100개를메모리그대로저장.txt", ios::binary );
        if (not in)
            exit(0);

        array<int, 100>a;

        in.read((char*)a.data(), 400);

        for (int num : a)
            cout << num << "\t";
        cout << endl;

        save("STL.cpp");
    }


//[문제] eclass에 가면 개들 파일이 있다. 파일을 binary모드로 기록했다.
//여기에는 class Dog 객체 100개 가록되어 있다. write함수를 사용하여 기록하였다.
//class Dog의 멤버는 다음과 같다.
//파일을 읽어 num값이 가장 큰 dog객체를 화면에 출력하라
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <array>
    using namespace std;

    class Dog {
        char c;
        int num;

    public:
        void show() const {
            cout << "char - " << c << ", num - " << num << endl;
        }
    };

    int main()
    {
        //바이너리로 열지 않았는데도 정상적으로 종료되면서 정상적인 것처럼 보이기에 조심해야 된다
        //이 파일은 어떻게 기록되어 있는지 binary 기억해라.
        ifstream in{ "개들", ios::binary};
        if (not in) {
            cout << "파일을 열 수 없다" << endl;
            return 0;
        }

        //100번 Dog정보 - char - i, num - 38857
        array<Dog, 100> dogs;
        in.read((char*)dogs.data(), sizeof(Dog) * 100);
        dogs[99].show();

        save("STL.cpp");
    }


//[변형] -->	여기에는 몇 개 인지 모르는 class Dog 객체를 write했다.
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <array>
    using namespace std;

    class Dog {
        char c;
        int num;

    public:
        void show() const {
            cout << "char - " << c << ", num - " << num << endl;
        }

        friend istream& operator>>(istream& is, Dog& dog) {
            is.read((char*)&dog, sizeof(Dog));
            return is;
        }

    };

    int main()
    {
        //바이너리로 열지 않았는데도 정상적으로 종료되면서 정상적인 것처럼 보이기에 조심해야 된다
        //이 파일은 어떻게 기록되어 있는지 binary 기억해라.
        ifstream in{ "개들", ios::binary};
        if (not in) {
            cout << "파일을 열 수 없다" << endl;
            return 0;
        }

        Dog dog;
        int cnt{};

        while (in >> dog)
            ++cnt;
        cout << "Dog 개수 - " << cnt << endl;
        cout << "100번째 Dog의 정보 - ";
        dog.show();

        save("STL.cpp");
    }


//[2] class Dog 객체 100개 기록되어 있다.
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <array>
    using namespace std;

    class Dog {
        char c;
        int num;

    public:
        int getNum() const {
            return num;
        }

        void show() const {
            cout << "char - " << c << ", num - " << num << endl;
        }

    };

    int main()
    {
        //바이너리로 열지 않았는데도 정상적으로 종료되면서 정상적인 것처럼 보이기에 조심해야 된다
        //이 파일은 어떻게 기록되어 있는지 binary 기억해라.
        ifstream in{ "개들", ios::binary};
        if (not in) {
            cout << "파일을 열 수 없다" << endl;
            return 0;
        }
        array<Dog, 100> dogs;
        in.read((char*)dogs.data(), sizeof(Dog) * 100);
            
        Dog maxDog;
        int maxValue{ numeric_limits<int>::min() };

        for (const Dog& dog : dogs) {
            if (maxValue < dog.getNum()) {
                maxDog = dog;
                maxValue = dog.getNum();
            }
        }

        cout << "Num값이 가장 큰 dog" << endl;
        maxDog.show();

        save("STL.cpp");
    }


//[3] 1000미만인 Dog 객체의 수를 출력해라.
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <algorithm>
    #include <array>
    using namespace std;

    class Dog {
        char c;
        int num;

    public:
        int getNum() const {
            return num;
        }

        void show() const {
            cout << "char - " << c << ", num - " << num << endl;
        }

    };

    int main()
    {
        //바이너리로 열지 않았는데도 정상적으로 종료되면서 정상적인 것처럼 보이기에 조심해야 된다
        //이 파일은 어떻게 기록되어 있는지 binary 기억해라.
        ifstream in{ "개들", ios::binary};
        if (not in) {
            cout << "파일을 열 수 없다" << endl;
            return 0;
        }
        array<Dog, 100> dogs;
        in.read((char*)&dogs, sizeof(Dog) * 100);
            
        //1000미만의 dog를 출력하기 위해 count 사용
        int cnt = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
            return dog.getNum() % 2; // 홀수 일 때 참, 짝수 일 때 거짓
            });
        cout << "값이 1000 미만인 Dog의 개수 - " << cnt << endl;
        save("STL.cpp");
    }


// [문제] 사용자가 입력한 int num 만큼 메모리를 동적 할당하고 
// int를 num개 동적할당한다. 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리를 합계를 화면에 출력한다. 이 모든 과정을 영원히 반복해라.
    #include <iostream>
    #include <numeric>
    #include "save.h"
    using namespace std;

    // -> run-time 에서야 num값이 결정된다 --> numT[num]
    // -> compile time에 모든 값이 결정 -> constexpr

    int main()
    { 
        save("STL.cpp");
        //STL 방식으로 바꾸는 중
        while (1) {
            int num;
            cout << "숫자 - ";
            cin >> num;

            int* arr = new int[num];

            iota(arr, arr + num, 1);
            auto sum = accumulate(arr, arr + num, 0LL );// (longlong) 0이라는 뜻 

            cout << "합계 : " << sum << endl;
        
            //delete[] arr;
        }
    }


// [문제] "STL.cpp"의 모든 소문자를 대문자로 바꿔 "STL대문자.txt"에 저장해라
    #include <iostream>
    #include "save.h"
    #include <fstream>
    #include <array>
    #include <fstream>
    #include <cctype>
    #include <algorithm>

    using namespace std;


    int main()
    {
        ifstream in{ "STL.cpp", ios::binary };
        if (not in) return 444444;
        ofstream out{ "STL대문자.txt", ios::binary };
        
        transform(istreambuf_iterator<char>{in}, {}, 
            ostreambuf_iterator<char>{out}, [](char c) {return c = toupper(c); }
        );


        save("STL.cpp");
    }


// [문제] [10'000, 99'999) 범위의 값을 갖는 int 100개를 만들어 주세요.
// qsort를 사용하여 오름차순으로 정렬하시오. 퀵소트
// 정렬된 결과를 화면에 보여주시오.
    uniform_int_distribution uid{ 1, 1000 };
    default_random_engine dre;

    int main()
    {
        array<int, 100> a;

        for (int& num : a)
            num = uid(dre);

        //qsort로 정렬 - generic 함수라서 여기서 시작
        int 정렬기준(const void* a, const void * b);
        qsort(a.data(), a.size(), sizeof(int), 정렬기준);

        cout << typeid(정렬기준).name() << endl;//이걸 위해서 지금까지 설명했다.

        for (int num : a)
            print("{:8}", num);

        save("STL.cpp");
    }

    int 정렬기준(const void* a, const void* b) {
        return *(int*)a - *(int*)b;
    }


//[문제] : [10'000, 99'999] 범위의 값을 갖는 int 100개를 만들어 주세요
// std::sort를 사용하여 오름차순을 정렬하ㅔ요  정렬한 결과를 화면에 보여주세요
    #include <iostream>
    #include "save.h"
    #include <random>
    #include <array>
    #include <print>
    #include <algorithm>
    using namespace std;



    uniform_int_distribution uid{ 1, 1'000 };
    default_random_engine dre;

    array<int, 100> a;
    int fcnt = 0;
    bool f(int, int);

    int main()
    {
        for (int& num : a) {
            num = uid(dre);
        }

        std::sort(a.begin(), a.end(), [](int a, int b) {
            return a > b;
            });// 가독성 훌륭한 코드 내림차순 

        for (int num : a)
            print("{:8}", num);

        save("STL.cpp");
    }


    bool f(int a, int b) {
        return a > b;
    }


//sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    #include <iostream>
    #include <array>
    #include "save.h"
    #include "String.h"
    #include <algorithm>
    using namespace std;

    extern bool 관찰;

    int main()
    {			
        array<String, 5> a{ "abc", "cdef", "efght", "ra", "tokrlk"};
        
        관찰 = true;
        sort(a.begin(), a.end(), [](const String& a, const String& b){//const String& &<< 빼면 무슨일 생기는지 관찰
            return a.getLen() > b.getLen();
            });
        관찰 = false;

        cout << "길이 오름차순 정렬결과" << endl;
        for (const String& s : a) ///&의 의미는 복사하지 마라는 뜻
            cout << s << endl;
        save("STL.cpp");
    }


//[문제] sort를 사용하여 a가 관리하는 string을 오름차순으로 정렬한 후 출력하라
    #include <iostream>
    #include <array>
    #include "save.h"
    #include "String.h"
    #include <algorithm>
    using namespace std;

    extern bool 관찰;

    int main()
    {			
        array<String, 5> a{ "aersbc", "cdef", "efghght", "rdsfsagaa", "tokbsdfsrlk"};
        
        for (const String& s : a)
            sort(s.getMem(), s.getMem() + s.getLen());

        cout << "길이 오름차순 정렬결과" << endl;
        for (const String& s : a) ///&의 의미는 복사하지 마라는 뜻
            cout << s << endl;
        save("STL.cpp");
    }


// [문제] a에 "stl.cpp"에 있는 단어를 저장하라......
// a를 길이 오름차순으로 정렬하라.....
// 화면에 a를 출력하라
    #include <iostream>
    #include <array>
    #include <algorithm>
    #include <fstream>
    #include "save.h"
    #include "String.h"

    extern bool 관찰;

    int main()
    {
        std::array<String, 100> a;



        std::ifstream in{ "stl.cpp" };

        if (not in)
            return 20240408;

        for (int i = 0; i < a.size(); ++i)
            in >> a[i];			//   operator>>(in, a[i]);

        // 길이 오름차순 정렬
        std::sort(a.begin(), a.end(), [](const String& a, const String& b) {
            return a.getLen() < b.getLen();
            });


        for (const String& s : a)
            std::cout << s << std::endl;

        save("stl.cpp");
    }


// [예제] int값 num을 입력받아 v에 [1, 1000]값을 갖는 int num개를 추가
// 오른차순 정렬한다
// 값을 출력한다.
    #include <iostream>
    #include <vector>
    #include <random>
    #include <algorithm>
    #include <print>
    #include <ranges>
    #include "save.h"
    #include "String.h"
    using namespace std;

    extern bool 관찰;

    default_random_engine dre;
    uniform_int_distribution uid{ 1, 1'0000 };

    int main()
    {			
        save("STL.cpp");

        while (true) {
            vector<int> v;
            cout << "숫자 입력 : ";
            int num;
            cin >> num;

            for (int i = 0; i < num; ++i)
                v.push_back(uid(dre));

            sort(v.begin(), v.end());

		    for (int num : v)
			    print("{:8}", num);

            //뒤에서 100개만 
		    for (int num : v | views::take(100))
			    print("{:8}", num);
        }
    }


// [문제] 키보드에서 입력한 int값의 합계와 평균을 출력하라.
    #include <iostream>
    #include <vector>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    using namespace std;
    extern bool 관찰;

    int main()
    {			

        vector<int> v{ istream_iterator<int>{cin}, {} };//키보드 입력 시작부터 입력 끝까지 저장하라.
        //얘를 종료시키려면 ctrl z enter 해야한다
        int sum = accumulate(v.begin(), v.end(), 0);

        cout << "합계 - " << sum << endl;
        cout << "평균 - " << format("{:.2f}", (double)sum / v.size()) << endl;


        save("STL.cpp");
    }


// [문제] 키보드에서 입력한 String을 길이오름차순 정렬하여 출력하라.
    #include <iostream>
    #include <vector>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    using namespace std;
    extern bool 관찰;

    int main()
    {			
        vector<String> v{ istream_iterator<String>{cin}, {} };//키보드 입력 시작부터 입력 끝까지 저장하라.
        
        sort(v.begin(), v.end(), [](const String& a, const String& b) {
            return a.getLen() < b.getLen();
            });

        for (String s : v)
            cout << s << " ";
        save("STL.cpp");
    }


// [문제] "STL.cpp" 에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 적는다
    #include <iostream>
    #include <vector>
    #include "save.h"
    #include "String.h"
    #include <fstream>
    #include <vector>
    #include <array>
    using namespace std;
    extern bool 관찰;

    int main()
    {
        ifstream in{ "STL.cpp" };
        if (not in)
            return 0;

        array<int, 26> a{};//배열을 쓰고 싶으면 이걸 써야지

        char c;
        while (in >> c)//이거 이상 간단하고 좋은 코드가 없다 글자를 읽는 것
            if (islower(c))
                a[c - 'a']++;

        for (int i = 0; i < a.size(); ++i)
            cout << '\t' << static_cast<char>('a' + i) << " - " << a[i] << endl;

        save("STL.cpp");
    }



//[문제] v에서 3을 제거하고 출력하라
    #include <iostream>
    #include <vector>
    #include "save.h"
    #include "String.h"
    using namespace std;
    extern bool 관찰;

    int main()
    {
        vector<int> v{ 1,2,3,4,5,5,3,4,3,33 };
        
        //erase-remove idiom
        v.erase(remove(v.begin(), v.end(), 3), v.end());//벡터 멤버함수인 삭제 함수

        for (int num : v)
            cout << num << ' ';
        save("STL.cpp");
    }


//값이 100인 int 하나 -> int 100개 벡터
    #include <iostream>
    #include <vector>
    #include <print>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    using namespace std;
    extern bool 관찰;

    int main()
    {
        
        vector<int> v(200);
        iota(v.begin(), v.end(), 1);

        for (int num : v)
            print("{:8}", num);

        save("STL.cpp");
    }


//[문제] v에서 홀수를 제거하라.
    #include <iostream>
    #include <vector>
    #include <print>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    using namespace std;
    extern bool 관찰;

    int main()
    {
        vector<int> v(200);
        iota(v.begin(), v.end(), 1);

        //v.erase(remove_if(v.begin(), v.end(), [](int num) {
        //	return num % 2;
        //	}), v.end());
        //c++20이후 더 간편해진 식
        erase_if(v, [](int num) {return num % 2; });

        for (int num : v)
            print("{:8}", num);

        save("STL.cpp");
    }


//[문제] v에서 3을 삭제하라.
    #include <iostream>
    #include <vector>
    #include <print>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    #include <string>
    using namespace std;
    extern bool 관찰;

    int main()
    {
        vector<String>v{ "1","2","3","4","5", "3", "33", "3 "};
        
        erase(v, String{ "3" });

        for (const String& s : v)
            cout << s << endl;

        save("STL.cpp");
    }


//[문제] v에 3을 추가하라
    #include <iostream>
    #include <vector>
    #include <print>
    #include <numeric>
    #include "save.h"
    #include "String.h"
    #include <string>
    #include <list>
    using namespace std;
    extern bool 관찰;

    int main()
    {
        vector<String>v{ "1", "22", "4444", "55555" };

        
        auto p = v.begin();
        ++p, ++p;

        v.emplace(p, "333");

        for (const String& s : v)
            cout << s << endl;

        save("STL.cpp");
    }


//문제 : 파일 int값들.txt에는 몇개인지 모르는 int가 저장되어 있다.
//모두 몇개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하시오
    #include <iostream>
    #include "save.h"

    #include <string_view>
    #include <fstream>
    #include <algorithm>
    using namespace std;


    int main()
    {


        //파일 읽어오는건 이런 방식을 쓸 수 밖에 없네
        ifstream in{ "int값들.txt" };
        if (not in)
            exit(0);

        cout << *max_element(istream_iterator<int>{in}, {});


        save("STL.cpp");
    }


//[문제] "string.cpp"에 있는 단어를 cont에 저장하라
    #include <iostream>
    #include "save.h"
    #include "String.h"
    #include <list>
    #include <fstream>
    #include <vector>
    #include <deque>
    using namespace std;
    extern bool 관찰;

    class Test {
        char x[4'096];
    };
    int main()
    {
        //list : 500, deque : 500, vector : 2000
        deque<String> cont;
        cout << "리스트의 크기 - " << sizeof cont << endl;//리스트의 크기 - 16
        관찰 = true; 
 
        ifstream in{ "String.cpp" };
        if (not in) return 0;
        String s;
        while (in >> s) {
            cont.emplace_back(s);//이건 어떨까 복사생성이 안나올까? -> 절대 안되지 그저 복사생성될 뿐이야.
            //s 객체가 그냥 객체니까.
        }

        관찰 = false;
        cout << endl;
        for (const String& s : cont)
            cout << s << endl;
        save("STL.cpp");
    }



